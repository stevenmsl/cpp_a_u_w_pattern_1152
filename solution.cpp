#include "solution.h"
#include <unordered_map>
#include <map>
#include <cstdlib>
using namespace sol1152;
using namespace std;

/* takeaways
   - construct a list of sites each user visited;
     list the sites in chronological order
   - for each user, scan through the sites the
     user visited to generate all possible
     3-seqeunces
   - for all the 3-sequences generated all the
     users, find the 3-seqence that has the most
     visits from different users
*/

vector<string> Solution::findPattern(vector<string> &users,
                                     vector<int> &ts, vector<string> &webs)
{
  auto n = users.size();
  /*
    - maintain the sites visited by
      each user in chronological order
  */
  /* C++ notes
    - map by default is sorted by the key
      in ascending order
    - so in this case it's sorted by timestamp
  */
  auto visited = unordered_map<string,
                               map<int, string>>();
  for (int i = 0; i < n; i++)
    visited[users[i]][ts[i]] = webs[i];

  /*
    - maintain a list of distinct 3-seqeunce
      generated by the sites each user visited
    - the key is the 3-sequence
    - map is used to maintain the lexicographical
      order among 3-sequences
  */
  auto threeSeqs = map<vector<string>,
                       unordered_map<string, int>>();

  /*
    - collect all the distinct 3-seqeunces generated
      by the sites each user visited
      - for each distinct 3-sequence, record which
        users who's visited sites can generate that
        sequence
    - example: james visited ["home","cart","maps","home"]
      - ["home","cart","maps"] (i,j,k) = (0,1,2)
      - ["home","cart","home"] (i,j,k) = (0,1,3)
      - ["cart","maps","home"] (i,j,k) = (1,2,3)
  */
  for (auto v : visited)
  {
    auto sites = v.second;
    auto usr = v.first;
    if (v.second.size() < 3)
      continue;
    for (auto i = sites.begin(); i != sites.end(); i++)
    {
      auto j = i;
      j++;
      for (; j != sites.end(); j++)
      {
        auto k = j;
        k++;
        for (; k != sites.end(); k++)
        {
          threeSeqs[{(*i).second, (*j).second, (*k).second}][usr]++;
        }
      }
    }
  }

  vector<string> result;
  int count = 0;

  for (auto s : threeSeqs)
  {
    if (s.second.size() > count)
    {
      result = s.first;
      /* only count different users */
      count = s.second.size();
    }
  }

  return result;
}
